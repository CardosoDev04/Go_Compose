Index: src/main/kotlin/isel/tds/go/mongo/MongoDriver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package isel.tds.go.mongo\n\nimport com.mongodb.ConnectionString\nimport com.mongodb.MongoClientException\nimport com.mongodb.client.model.Filters\nimport com.mongodb.kotlin.client.MongoClient\nimport com.mongodb.kotlin.client.MongoCollection\nimport com.mongodb.kotlin.client.MongoDatabase\nimport java.io.Closeable\n\nclass MongoDriver(nameDb: String? = null): Closeable {\n    val db: MongoDatabase\n    private val client: MongoClient\n    init {\n        val envConnection = System.getenv(\"MONGO_CONNECTION\") ?: throw MongoClientException(\"Missing MONGO_CONNECTION environment variable\")\n        val dbName = requireNotNull(nameDb ?: ConnectionString(envConnection).database) { \"Missing dbName\" }\n        client = MongoClient.create(envConnection)\n        db = client.getDatabase(dbName)\n    }\n    override fun close() = client.close()\n}\n\n\nclass Collection<T: Any>(val collection: MongoCollection<T>)\n\ninline fun <reified T: Any> MongoDriver.getCollection(id: String): Collection<T> =\n    Collection(db.getCollection(id, T::class.java))\n\ninline fun <reified T: Any> MongoDriver.getAllCollectionNames(): List<Collection<T>> =\n    db.listCollectionNames().toList().map { getCollection<T>(it) }\n\nfun <T: Any> Collection<T>.getAllDocuments(): List<T> =\n    collection.find().toList()\n\nfun <T: Any, K> Collection<T>.getDocument(id: K): T? =\n    collection.find(Filters.eq(id)).firstOrNull()\n\nfun <T: Any> Collection<T>.insertDocument(document: T) =\n    collection.insertOne(document).insertedId != null\n\nfun <T: Any, K> Collection<T>.replaceDocument(id: K, document: T): Boolean =\n    collection.replaceOne(Filters.eq(id), document).modifiedCount == 1L\n\nfun <T: Any, K> Collection<T>.deleteDocument(id: K): Boolean =\n    collection.deleteOne(Filters.eq(\"_id\", id)).deletedCount == 1L\n\nfun <T: Any> Collection<T>.deleteAllDocuments(): Boolean =\n    collection.deleteMany(Filters.exists(\"_id\")).wasAcknowledged()
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/isel/tds/go/mongo/MongoDriver.kt b/src/main/kotlin/isel/tds/go/mongo/MongoDriver.kt
--- a/src/main/kotlin/isel/tds/go/mongo/MongoDriver.kt	(revision 9439f989147970c2718c98726303a6dd5e0677c5)
+++ b/src/main/kotlin/isel/tds/go/mongo/MongoDriver.kt	(date 1703327674435)
@@ -12,7 +12,8 @@
     val db: MongoDatabase
     private val client: MongoClient
     init {
-        val envConnection = System.getenv("MONGO_CONNECTION") ?: throw MongoClientException("Missing MONGO_CONNECTION environment variable")
+//        val envConnection = System.getenv("MONGO_CONNECTION") ?: throw MongoClientException("Missing MONGO_CONNECTION environment variable")
+        val envConnection = "mongodb+srv://HarvyDev:5NGpmF7T4fyV7dDpeVL4@cluster0.wbqjdoy.mongodb.net/?retryWrites=true&w=majority"
         val dbName = requireNotNull(nameDb ?: ConnectionString(envConnection).database) { "Missing dbName" }
         client = MongoClient.create(envConnection)
         db = client.getDatabase(dbName)
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1703326122809)
+++ b/.idea/vcs.xml	(date 1703326122809)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/kotlin/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import androidx.compose.desktop.ui.tooling.preview.Preview\nimport androidx.compose.material.Button\nimport androidx.compose.material.MaterialTheme\nimport androidx.compose.material.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.setValue\nimport androidx.compose.ui.window.Window\nimport androidx.compose.ui.window.application\n\n@Composable\n@Preview\nfun App() {\n    var text by remember { mutableStateOf(\"Hello, World!\") }\n\n    MaterialTheme {\n        Button(onClick = {\n            text = \"Hello, Desktop!\"\n        }) {\n            Text(text)\n        }\n    }\n}\n\nfun main() = application {\n    Window(onCloseRequest = ::exitApplication) {\n        App()\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Main.kt b/src/main/kotlin/Main.kt
--- a/src/main/kotlin/Main.kt	(revision 9439f989147970c2718c98726303a6dd5e0677c5)
+++ b/src/main/kotlin/Main.kt	(date 1703327295011)
@@ -7,14 +7,36 @@
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.runtime.setValue
-import androidx.compose.ui.window.Window
-import androidx.compose.ui.window.application
+import androidx.compose.ui.unit.DpSize
+import androidx.compose.ui.window.*
+import isel.tds.go.mongo.MongoDriver
+
+
 
 @Composable
 @Preview
-fun App() {
+fun FrameWindowScope.App(driver: MongoDriver, exitFunction: () -> Unit) {
     var text by remember { mutableStateOf("Hello, World!") }
 
+    MenuBar {
+//      Menu("Game") {
+////                Item("Start", onClick = println("Start button clicked"))
+////                Item("Join", onClick = println("Join game button clicked"))
+////            }
+////            Menu("Play") {
+////                Item("Pass", onClick = println("Pass button clicked"))
+////                Item("Captures", onClick = println("Captures button clicked"))
+////                Item("Score", onClick = println("Score button clicked"))
+////            }
+////            Menu("Options") {
+////                Item("Show Last", onClick = println("Show Last button clicked"))
+////            }
+        Menu("Game") {
+            Item("Exit", onClick = exitFunction)
+        }
+}
+
+
     MaterialTheme {
         Button(onClick = {
             text = "Hello, Desktop!"
@@ -24,8 +46,18 @@
     }
 }
 
-fun main() = application {
-    Window(onCloseRequest = ::exitApplication) {
-        App()
-    }
-}
+fun main() =
+    MongoDriver("Go").use { driver ->
+        application {
+            application {
+                Window(
+                    onCloseRequest = ::exitApplication,
+                    title = "Go",
+                    state = WindowState(size = DpSize.Unspecified)
+                ) {
+                    App(driver, ::exitApplication)
+                }
+            }
+        }
+    }
+
Index: src/main/kotlin/isel/tds/go/viewmodel/AppViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/isel/tds/go/viewmodel/AppViewModel.kt b/src/main/kotlin/isel/tds/go/viewmodel/AppViewModel.kt
new file mode 100644
--- /dev/null	(date 1703332192687)
+++ b/src/main/kotlin/isel/tds/go/viewmodel/AppViewModel.kt	(date 1703332192687)
@@ -0,0 +1,33 @@
+package isel.tds.go.viewmodel
+
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.setValue
+import isel.tds.go.model.Board
+import isel.tds.go.model.Clash
+import isel.tds.go.model.Game
+import isel.tds.go.mongo.MongoDriver
+import isel.tds.go.storage.GameSerializer
+import isel.tds.go.storage.MongoStorage
+import kotlinx.coroutines.CoroutineScope
+
+class AppViewModel(driver: MongoDriver, val scope: CoroutineScope) {
+    private val storage = MongoStorage<String, Game>("games", driver, GameSerializer)
+    private var clash by mutableStateOf(Clash(storage))
+
+    var viewScore by mutableStateOf(false)
+        private set
+    var inputName by mutableStateOf<InputName?>(null)
+        private set
+    var errorMessage by mutableStateOf<String?>(null)
+        private set
+
+    val board: Board? get() = (clash as? ClashRun)?.game?.board
+//    val score:
+    val me: Player? get() = (clash as? ClashRun)?.me
+
+    val hasClash: Boolean get() = clash is ClashRun
+    val newAvailable: Boolean get() = clash.canNewBoard()
+
+
+}
\ No newline at end of file
Index: src/main/kotlin/isel/tds/go/model/Clash.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/isel/tds/go/model/Clash.kt b/src/main/kotlin/isel/tds/go/model/Clash.kt
new file mode 100644
--- /dev/null	(date 1703331776135)
+++ b/src/main/kotlin/isel/tds/go/model/Clash.kt	(date 1703331776135)
@@ -0,0 +1,7 @@
+package isel.tds.go.model
+
+import isel.tds.go.storage.Storage
+
+typealias GameStorage = Storage<String, Game>
+
+class Clash (val gs: GameStorage)
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 9439f989147970c2718c98726303a6dd5e0677c5)
+++ b/.idea/gradle.xml	(date 1703326122805)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
